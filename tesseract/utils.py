#!/usr/bin/env python3
from pathlib import Path
import os
import shlex
import subprocess
import pytesseract
from PIL import Image

# path = Path('/home/meyer/code/tesstrain/data/emey-ground-truth')
# for file_idx, filename in enumerate(path.iterdir()):
#     os.rename(filename, path / f'{file_idx}.jpg')

# data = [
#     (0, 177.9),
#     (1, 262.2),
#     (2, 319.2),
#     (3, 262.4),
#     (4, 262.8),
#     (6, 253.5),
#     (7, 261.7),
#     (8, 175.6),
#     (9, 252.9),
#     (10, 265.6),
#     (11, 290.8),
#     (12, 294.6),
#     (13, 260.1),
#     (14, 169.1),
#     (15, 170.3),
#     (16, 292.3),
#     (17, 252,1),
#     (18, 252.6),
#     (20, 245.3),
#     (21, 244.4),
#     (22, 242.8),
#     (23, 239.8),
#     (24, 239.1),
#     (25, 239.0),
#     (26, 230.3),
#     (27, 228.6),
#     (29, 221.3),
#     (30, 221.4),
#     (32, 258.5),
#     (33, 221.9),
#     (34, 221.2),
#     (35, 208.8),
#     (36, 176.7),
#     (37, 207.2),
#     (38, 262.8),
#     (40, 291.4),
#     (41, 313.6),
#     (42, 315.6),
#     (43, 177.6),
#     (44, 177.2),
#     (45, 263.5),
#     (46, 171.7),
#     (51, 233.6),
# ]

# data = [
#     (0, 0, 177.9),
#     (1, 0, 262.2),
#     (2, 0, 319.2),
#     (3, 100, 262.4),
#     (4, 100, 262.8),
#     (6, 11, 253.5),
#     (7, 120, 261.7),
#     (8, 149, 175.6),
#     (9, 188, 252.9),
#     (10, 188, 265.6),
#     (11, 188, 290.8),
#     (12, 188, 294.6),
#     (13, 193, 260.1),
#     (14, 199, 169.1),
#     (15, 199, 170.3),
#     (16, 200, 292.3),
#     (17, 2, 252.1),
#     (18, 2, 252.6),
#     (20, 268, 245.3),
#     (21, 276, 244.4),
#     (22, 298, 242.8),
#     (23, 328, 239.8),
#     (24, 369, 239.1),
#     (25, 389, 239.0),
#     (26, 469, 230.3),
#     (27, 488, 228.6),
#     (29, 506, 221.3),
#     (30, 528, 221.4),
#     (32, 58, 258.5),
#     (33, 593, 221.9),
#     (34, 598, 221.2),
#     (35, 669, 208.8),
#     (36, 68, 176.7),
#     (37, 699, 207.2),
#     (38, 79, 262.8),
#     (43, 9, 177.6),
#     (44, 98, 177.2),
#     (45, 98, 263.5),
# ]




# black & white full picture
# data = [
#     ('A7C06794', 0, 3.065),
#     ('A7C06818', 197, 2.932),
#     ('A7C06827', 209, 2.920),
#     ('A7C06831', 223, 2.925),
#     ('A7C06840', 239, 2.915),
#     ('A7C06850', 254, 2.909),
#     ('A7C06853', 260, 2.900),
#     ('A7C06861', 281, 2.912),
#     ('A7C06867', 308, 2.920),
#     ('A7C06870', 329, 2.923),
#     ('A7C06879', 359, 2.914),
#     ('A7C06886', 372, 2.904),
#     ('A7C06892', 387, 2.902),
#     ('A7C06899', 1208, 2.688),
#     ('A7C06907', 1240, 2.652),
#     ('A7C06911', 1239, 2.645),
#     ('A7C06917', 1238, 2.635),
#     ('A7C06927', 1285, 2.621),
#     ('A7C06934', 1385, 2.606),
#     ('A7C06939', 1468, 2.590),
#     ('A7C06945', 1568, 2.578),
#     ('A7C06951', 1688, 2.559),
#     ('A7C06963', 1915, 2.498),
#     ('A7C06969', 2030, 2.452),
#     ('A7C06973', 2107, 2.430),
#     ('A7C06980', 2183, 2.396),
#     ('A7C06996', 2246, 2.315),
#     ('A7C07002', 2349, 2.320),
#     ('A7C07009', 2486, 2.309),
#     ('A7C07015', 2608, 2.304),
#     ('A7C07019', 2883, 2.287),
#     ('A7C07026', 2822, 2.261),
#     ('A7C07031', 2914, 2.249),
#     ('A7C07041', 3033, 2.206),
#     ('A7C07049', 3138, 2.180),
#     ('A7C07055', 3231, 2.164),
#     ('A7C07059', 3231, 2.144),
#     ('A7C07067', 3230, 2.116),
#     ('A7C07077', 3319, 2.102),
#     ('A7C07092', 3619, 2.071),
#     ('A7C07100', 3949, 2.003),
#     ('A7C07110', 4172, 1.967),
#     ('A7C07116', 4175, 1.934),
#     ('A7C07127', 4174, 1.905),
#     ('A7C07132', 4174, 1.896),
#     ('A7C07144', 4173, 1.876),
#     ('A7C07152', 4172, 1.866),
#     ('A7C07157', 4172, 1.860),
#     ('A7C07169', 4171, 1.848),
#     ('A7C07180', 4171, 1.839),
#     ('A7C07190', 4170, 1.831),
#     ('A7C07196', 4102, 1.604),
#     ('A7C07214', 3068, 1.806),
#     ('A7C07221', 2598, 1.934),
#     ('A7C07228', 2084, 2.074),
#     ('A7C07252', 468, 2.964),
#     ('A7C07264', 289, 2.877),
#     ('A7C07271', 290, 2.857),
#     ('A7C07282', 289, 2.850),
#     ('A7C07294', 387, 2.807),
#     ('A7C07301', 464, 2.822),
#     ('A7C07308', 554, 2.806),
#     ('A7C07317', 683, 2.765),
#     ('A7C07326', 847, 2.698),
#     ('A7C07336', 1042, 2.622),
#     ('A7C07350', 1240, 2.547),
#     ('A7C07359', 1240, 2.502),
#     ('A7C07370', 1327, 2.487),
#     ('A7C07376', 1459, 2.434),
#     ('A7C07386', 1692, 2.370),
#     ('A7C07389', 1750, 2.354),
#     ('A7C07396', 1933, 2.239),
#     ('A7C07403', 2080, 2.211),
#     ('A7C07404', 2088, 2.204),
#     ('A7C07414', 2177, 2.155),
#     ('A7C07425', 2176, 2.128),
#     ('A7C07434', 2280, 2.124),
#     ('A7C07443', 2478, 2.125),
#     ('A7C07449', 2619, 2.104),
#     ('A7C07457', 2795, 2.069),
#     ('A7C07463', 2927, 2.045),
#     ('A7C07471', 3095, 2.002),
#     ('A7C07475', 3169, 1.986),
#     ('A7C07483', 3202, 1.842),
#     ('A7C07496', 2468, 1.901),
#     ('A7C07518', 1183, 2.318),
#     ('A7C07529', 686, 2.619),
#     ('A7C07537', 439, 2.804),
#     ('A7C07546', 282, 2.907),
#     ('A7C07556', 282, 2.814),
#     ('A7C07566', 282, 2.803),
# ]
#

# path = Path('/home/meyer/code/tesstrain/data/scale-ground-truth')
#
# for a_data in data:
#     new_path = path / f'{a_data[0]}.gt.txt'
#     print(f'emey new path: {new_path}')
#     with open(new_path, 'w') as outf:
#         outf.write(f'{a_data[1]}{a_data[2]}\n')

# --- training for the scale ---
# data = [
#     ('A7C06794', '0'),
#     ('A7C06818', '197'),
#     ('A7C06827', '209'),
#     ('A7C06831', '223'),
#     ('A7C06840', '239'),
#     ('A7C06850', '254'),
#     ('A7C06853', '260'),
#     ('A7C06861', '281'),
#     ('A7C06867', '308'),
#     ('A7C06870', '329'),
#     ('A7C06879', '359'),
#     ('A7C06886', '372'),
#     ('A7C06892', '387'),
#     ('A7C06899', '1208'),
#     ('A7C06907', '1240'),
#     ('A7C06911', '1239'),
#     ('A7C06917', '1238'),
#     ('A7C06927', '1285'),
#     ('A7C06934', '1385'),
#     ('A7C06939', '1468'),
#     ('A7C06945', '1568'),
#     ('A7C06951', '1688'),
#     ('A7C06963', '1915'),
#     ('A7C06969', '2030'),
#     ('A7C06973', '2107'),
#     ('A7C06980', '2183'),
#     ('A7C06996', '2246'),
#     ('A7C07002', '2349'),
#     ('A7C07009', '2486'),
#     ('A7C07015', '2608'),
#     ('A7C07019', '2883'),
#     ('A7C07026', '2822'),
#     ('A7C07031', '2914'),
#     ('A7C07041', '3033'),
#     ('A7C07049', '3138'),
#     ('A7C07055', '3231'),
#     ('A7C07059', '3231'),
#     ('A7C07067', '3230'),
#     ('A7C07077', '3319'),
#     ('A7C07092', '3619'),
#     ('A7C07100', '3949'),
#     ('A7C07110', '4172'),
#     ('A7C07116', '4175'),
#     ('A7C07127', '4174'),
#     ('A7C07132', '4174'),
#     ('A7C07144', '4173'),
#     ('A7C07152', '4172'),
#     ('A7C07157', '4172'),
#     ('A7C07169', '4171'),
#     ('A7C07180', '4171'),
#     ('A7C07190', '4170'),
#     ('A7C07196', '4102'),
#     ('A7C07214', '3068'),
#     ('A7C07221', '2598'),
#     ('A7C07228', '2084'),
#     ('A7C07252', '468'),
#     ('A7C07264', '289'),
#     ('A7C07271', '290'),
#     ('A7C07282', '289'),
#     ('A7C07294', '387'),
#     ('A7C07301', '464'),
#     ('A7C07308', '554'),
#     ('A7C07317', '683'),
#     ('A7C07326', '847'),
#     ('A7C07336', '1042'),
#     ('A7C07350', '1240'),
#     ('A7C07359', '1240'),
#     ('A7C07370', '1327'),
#     ('A7C07376', '1459'),
#     ('A7C07386', '1692'),
#     ('A7C07389', '1750'),
#     ('A7C07396', '1933'),
#     ('A7C07403', '2080'),
#     ('A7C07404', '2088'),
#     ('A7C07414', '2177'),
#     ('A7C07425', '2176'),
#     ('A7C07434', '2280'),
#     ('A7C07443', '2478'),
#     ('A7C07449', '2619'),
#     ('A7C07457', '2795'),
#     ('A7C07463', '2927'),
#     ('A7C07471', '3095'),
#     ('A7C07475', '3169'),
#     ('A7C07483', '3202'),
#     ('A7C07496', '2468'),
#     ('A7C07518', '1183'),
#     ('A7C07529', '686'),
#     ('A7C07537', '439'),
#     ('A7C07546', '282'),
#     ('A7C07556', '282'),
#     ('A7C07566', '282'),
# ]
#
# path = Path('/home/meyer/code/tesstrain/data/scale-ground-truth')
#
# for picture in path.iterdir():
#     cmd = shlex.split(f'convert {picture} -crop "680x300+369+785" {picture}')
#     subprocess.run(cmd)
#
# for a_data in data:
#     new_path = path / f'{a_data[0]}.gt.txt'
#     print(f'emey new path: {new_path}')
#     with open(new_path, 'w') as outf:
#         outf.write(f'{a_data[1]}\n')

# --- training for the multimeter ---
# data = [
#     ('A7C06794', 3.065),
#     ('A7C06818', 2.932),
#     ('A7C06827', 2.920),
#     ('A7C06831', 2.925),
#     ('A7C06840', 2.915),
#     ('A7C06850', 2.909),
#     ('A7C06853', 2.900),
#     ('A7C06861', 2.912),
#     ('A7C06867', 2.920),
#     ('A7C06870', 2.923),
#     ('A7C06879', 2.914),
#     ('A7C06886', 2.904),
#     ('A7C06892', 2.902),
#     ('A7C06899', 2.688),
#     ('A7C06907', 2.652),
#     ('A7C06911', 2.645),
#     ('A7C06917', 2.635),
#     ('A7C06927', 2.621),
#     ('A7C06934', 2.606),
#     ('A7C06939', 2.590),
#     ('A7C06945', 2.578),
#     ('A7C06951', 2.559),
#     ('A7C06963', 2.498),
#     ('A7C06969', 2.452),
#     ('A7C06973', 2.430),
#     ('A7C06980', 2.396),
#     ('A7C06996', 2.315),
#     ('A7C07002', 2.320),
#     ('A7C07009', 2.309),
#     ('A7C07015', 2.304),
#     ('A7C07019', 2.287),
#     ('A7C07026', 2.261),
#     ('A7C07031', 2.249),
#     ('A7C07041', 2.206),
#     ('A7C07049', 2.180),
#     ('A7C07055', 2.164),
#     ('A7C07059', 2.144),
#     ('A7C07067', 2.116),
#     ('A7C07077', 2.102),
#     ('A7C07092', 2.071),
#     ('A7C07100', 2.003),
#     ('A7C07110', 1.967),
#     ('A7C07116', 1.934),
#     ('A7C07127', 1.905),
#     ('A7C07132', 1.896),
#     ('A7C07144', 1.876),
#     ('A7C07152', 1.866),
#     ('A7C07157', 1.860),
#     ('A7C07169', 1.848),
#     ('A7C07180', 1.839),
#     ('A7C07190', 1.831),
#     ('A7C07196', 1.604),
#     ('A7C07214', 1.806),
#     ('A7C07221', 1.934),
#     ('A7C07228', 2.074),
#     ('A7C07252', 2.964),
#     ('A7C07264', 2.877),
#     ('A7C07271', 2.857),
#     ('A7C07282', 2.850),
#     ('A7C07294', 2.807),
#     ('A7C07301', 2.822),
#     ('A7C07308', 2.806),
#     ('A7C07317', 2.765),
#     ('A7C07326', 2.698),
#     ('A7C07336', 2.622),
#     ('A7C07350', 2.547),
#     ('A7C07359', 2.502),
#     ('A7C07370', 2.487),
#     ('A7C07376', 2.434),
#     ('A7C07386', 2.370),
#     ('A7C07389', 2.354),
#     ('A7C07396', 2.239),
#     ('A7C07403', 2.211),
#     ('A7C07404', 2.204),
#     ('A7C07414', 2.155),
#     ('A7C07425', 2.128),
#     ('A7C07434', 2.124),
#     ('A7C07443', 2.125),
#     ('A7C07449', 2.104),
#     ('A7C07457', 2.069),
#     ('A7C07463', 2.045),
#     ('A7C07471', 2.002),
#     ('A7C07475', 1.986),
#     ('A7C07483', 1.842),
#     ('A7C07496', 1.901),
#     ('A7C07518', 2.318),
#     ('A7C07529', 2.619),
#     ('A7C07537', 2.804),
#     ('A7C07546', 2.907),
#     ('A7C07556', 2.814),
#     ('A7C07566', 2.803),
# ]
#
# path = Path('/home/meyer/code/tesstrain/data/scale_mm_4-ground-truth')
#
# for picture in path.iterdir():
#     cmd = shlex.split(f'convert {picture} -crop "642x333+2078+733" {picture}')
#     subprocess.run(cmd)
#
# for a_data in data:
#     new_path = path / f'{a_data[0]}.gt.txt'
#     print(f'emey new path: {new_path}')
#     with open(new_path, 'w') as outf:
#         outf.write(f'{a_data[1]}\n')


# --- Crop the scale and mm ---
# path = Path('/home/meyer/tmp/velo_compare_1')
# path_scale = path / 'scale'
# path_mm = path / 'mm'

# for picture in path.iterdir():
#     cmd = shlex.split(f'convert {picture} -crop "680x300+369+785" {path_scale/picture.name}')
#     subprocess.run(cmd)
#     cmd = shlex.split(f'convert {picture} -crop "642x333+2078+733" {path_mm/picture.name}')
#     subprocess.run(cmd)

# # --- conversion to binary black & white ---
# path = Path('/home/meyer/code/tesstrain/data/scale-ground-truth')
# for picture in path.iterdir():
#     cmd = shlex.split(f'convert -threshold 40% {picture} {picture}')
#     subprocess.run(cmd)

# --- Read the cropped scale and multimeter---
path = Path('/home/meyer/tmp/velo_compare_1/')
path_to_output = path / 'data.csv'
path_to_scale = path / 'scale'
path_to_mm = path / 'mm'

with open(path_to_output, 'w') as outf:
    outf.write('filename,scale (grams),multi-meter (volts)\n')

for picture in path.iterdir():
    print(picture)
    scale_picture = path_to_scale / picture.name
    mm_picture = path_to_mm / picture.name

    if scale_picture.exists() and mm_picture.exists():
        img = Image.open(scale_picture)
        config = f"-l scale --oem 1 --psm 13"
        scale_text = pytesseract.image_to_string(img, config=config).strip()

        img = Image.open(mm_picture)
        config = f"-l mm --oem 1 --psm 13"
        mm_text = pytesseract.image_to_string(img, config=config).strip()

        with open(path_to_output, 'a') as outf:
            outf.write(f'{picture.name.split('.')[0]},{scale_text},{mm_text}\n')

with open(path_to_output, 'a') as outf:
    outf.write('\n')


